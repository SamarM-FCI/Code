# -*- coding: utf-8 -*-
"""AraBERT.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1pcgGmD06-XXZ9y9UuDTW0KVpUkw67Lmq

# installation

# required lib
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

import random
import time
import torch
import torch.nn as nn

from sklearn.model_selection import train_test_split
import csv

from sklearn.metrics import accuracy_score, roc_curve, auc

import re
import unicodedata
import numpy as np
import torch
from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler
from transformers import BertTokenizer, BertConfig
from transformers import BertForSequenceClassification, AdamW, BertConfig
from transformers import get_linear_schedule_with_warmup
from tqdm import tqdm, trange

import transformers
from transformers import AutoModelForSequenceClassification, AutoTokenizer, AutoModel
from transformers import AdamW, get_linear_schedule_with_warmup
from torch.optim import SparseAdam, Adam

from torch.utils.data import TensorDataset, DataLoader, RandomSampler, SequentialSampler

import torch.nn.functional as F

from google.colab import drive
drive.mount("/content/drive")

"""# Data"""

data = pd.read_csv('/content/drive/My Drive/Master_Finally/Fake_vaccination/Data/data_after_cleaning.csv')
df = data
X = df.root_extracting.values
y = df.stance.values

'''
X_train, X_val, y_train, y_val = train_test_split(X,y,test_size=0.3, random_state=42)

test_df = pd.read_csv("test_data.csv")
X_test = test_df.sentence.values
y_test = test_df.labels.values'''

df.head()

# Split the data into training (70%), validation (10%), and test (20%) sets
train_data, test_data = train_test_split(df, test_size=0.3, random_state=42)
val_data, test_data = train_test_split(test_data, test_size=2/3, random_state=42)

# Save each set to a new CSV file
train_data.to_csv('train_data.csv', index=False)
val_data.to_csv('val_data.csv', index=False)
test_data.to_csv('test_data.csv', index=False)

train_df = pd.read_csv("train_data.csv")
X_train = train_df.root_extracting.values
y_train = train_df.stance.values


val_df = pd.read_csv("val_data.csv")
X_val = val_df.root_extracting.values
y_val = val_df.stance.values

test_df = pd.read_csv("test_data.csv")
X_test = test_df.root_extracting.values
y_test = test_df.stance.values

# model used
model_name="moha/mbert_ar_c19"
batch_size = 8
epoch = 2

"""# pre-processing for BERT"""

# preprocessing text
def text_preprocessing(text):
    # Normalize unicode encoding
    text = unicodedata.normalize('NFC', text)
    # Remove '@name'
    text = re.sub(r'(@.*?)[\s]', ' ', text)

    # Replace '&amp;' with '&'
    text = re.sub(r'&amp;', '&', text)

    # Remove trailing whitespace
    text = re.sub(r'\s+', ' ', text).strip()

    return text

def preprocessing_for_bert(data, text_preprocessing_fn = text_preprocessing):
    """
    Preprocess data for Bert.
    """
    input_ids = []
    attention_masks = []

    tokenizer = AutoTokenizer.from_pretrained(model_name)

    for i,sent in enumerate(data):
        encoded_sent = tokenizer.encode_plus(
            text=text_preprocessing_fn(sent),
            add_special_tokens=True,        # Add `[CLS]` and `[SEP]`
            max_length=MAX_LEN,             # Max length to truncate/pad
            padding='max_length',           # Pad sentence to max length
            return_attention_mask=True,     # Return attention mask
            truncation = True
            )

        input_ids.append(encoded_sent.get('input_ids'))
        attention_masks.append(encoded_sent.get('attention_mask'))

    input_ids = torch.tensor(input_ids)
    attention_masks = torch.tensor(attention_masks)

    return input_ids, attention_masks

MAX_LEN =  300

print("example of input ===> ")
token_ids = list(preprocessing_for_bert([X[0]])[0].squeeze().numpy())
print('Original: ', X[0])
print('Token IDs: ', token_ids)

#tokenixe train data
train_inputs, train_masks = preprocessing_for_bert(X_train)
val_inputs, val_masks = preprocessing_for_bert(X_val)

# Convert other data types to torch.Tensor
train_labels = torch.tensor(y_train)
val_labels = torch.tensor(y_val)

# Create the DataLoader for our training set
train_data = TensorDataset(train_inputs, train_masks, train_labels)
train_sampler = RandomSampler(train_data)
train_dataloader = DataLoader(train_data, sampler=train_sampler, batch_size=batch_size)

# Create the DataLoader for our validation set
val_data = TensorDataset(val_inputs, val_masks, val_labels)
val_sampler = SequentialSampler(val_data)
val_dataloader = DataLoader(val_data, sampler=val_sampler, batch_size=batch_size)

"""# BERT classifier"""

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

import torch
import torch.nn as nn
from transformers import BertModel

class BertClassifier(nn.Module):
    def __init__(self,freeze_bert=False):

        super(BertClassifier, self).__init__()

        self.bert = AutoModel.from_pretrained(model_name)

        # Instantiate an one-layer feed-forward classifier
        self.classifier = nn.Sequential(
            nn.Linear(768,24),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(24, 2)
        )

        # Freeze the BERT model
        if freeze_bert:
            for param in self.bert.parameters():
               param.requires_grad = False

    def forward(self, input_ids, attention_mask):
        # Feed input to BERT
        outputs = self.bert(input_ids=input_ids,
                            attention_mask=attention_mask)

        # Extract the last hidden state of the token `[CLS]` for classification task
        last_hidden_state_cls = outputs[0][:, 0, :]

        # Feed input to classifier to compute logits
        logits = self.classifier(last_hidden_state_cls)

        return logits

def initialize_model(epochs= epoch):  #, version="mini"):

    bert_classifier = BertClassifier(freeze_bert=False)
    bert_classifier.to(device) # for run in GPU

    # Create the optimizer
    optimizer = AdamW(params=list(bert_classifier.parameters()),
                      lr=5e-5,
                      eps=1e-8    # A small constant for numerical stability to prevent division by zero in the optimizer.
                      )

    total_steps = len(train_dataloader) * epochs

    # Set up the learning rate scheduler
    scheduler = get_linear_schedule_with_warmup(optimizer,
                                                num_warmup_steps=0,
                                                num_training_steps=total_steps)
    return bert_classifier, optimizer, scheduler

"""# Train"""

# Specify loss function
loss_fn = nn.CrossEntropyLoss()

def set_seed(seed_value=42):
    """Set seed for reproducibility.
    """
    random.seed(seed_value)
    np.random.seed(seed_value)
    torch.manual_seed(seed_value)
    torch.cuda.manual_seed_all(seed_value)

def train(model, train_dataloader, val_dataloader=None, epochs=4, evaluation=False):
    """Train the BertClassifier model.
    """
    # Start training loop
    print("Start training...\n")
    for epoch_i in range(epochs):
        # =======================================
        #               Training
        # =======================================
        # Print the header of the result table
        print(f"{'Epoch':^7} | {'Batch':^7} | {'Train Loss':^12} | {'Val Loss':^10} | {'Val Acc':^9} | {'Elapsed':^9}")
        print("-"*70)

        # Measure the elapsed time of each epoch
        t0_epoch, t0_batch = time.time(), time.time()
        # Reset tracking variables at the beginning of each epoch
        total_loss, batch_loss, batch_counts = 0, 0, 0

        # Put the model into the training mode
        model.train()

        # For each batch of training data...
        for step, batch in enumerate(train_dataloader):
            batch_counts +=1
            # Load batch to GPU
            b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)

            # Zero out any previously calculated gradients
            model.zero_grad()

            # Perform a forward pass. This will return logits.
            logits = model(b_input_ids, b_attn_mask)
            # Compute loss and accumulate the loss values
            loss = loss_fn(logits, b_labels)
            batch_loss += loss.item()
            total_loss += loss.item()

            # Perform a backward pass to calculate gradients
            loss.backward()

            # Clip the norm of the gradients to 1.0 to prevent "exploding gradients"
            torch.nn.utils.clip_grad_norm_(model.parameters(), 1.0)

            # Update parameters and the learning rate
            optimizer.step()
            scheduler.step()
            # Print the loss values and time elapsed for every 20 batches
            if (step % 40 == 0 and step != 0) or (step == len(train_dataloader) - 1):
                # Calculate time elapsed for 20 batches
                time_elapsed = time.time() - t0_batch

                # Print training results
                print(f"{epoch_i + 1:^7} | {step:^7} | {batch_loss / batch_counts:^12.6f} | {'-':^10} | {'-':^9} | {time_elapsed:^9.2f}")

                # Reset batch tracking variables
                batch_loss, batch_counts = 0, 0
                t0_batch = time.time()
                # Calculate the average loss over the entire training data
        avg_train_loss = total_loss / len(train_dataloader)

        print("-"*70)
        # =======================================
        #               Evaluation
        # =======================================
        if evaluation == True:
            # After the completion of each training epoch, measure the model's performance
            # on our validation set.
            val_loss, val_accuracy = evaluate(model, val_dataloader)

            # Print performance over the entire training data
            time_elapsed = time.time() - t0_epoch

            print(f"{epoch_i + 1:^7} | {'-':^7} | {avg_train_loss:^12.6f} | {val_loss:^10.6f} | {val_accuracy:^9.2f} | {time_elapsed:^9.2f}")
            print("-"*70)
        print("\n")
        print("Training complete!")


def evaluate(model, val_dataloader):
    """After the completion of each training epoch, measure the model's performance
    on our validation set.
    """
    # Put the model into the evaluation mode. The dropout layers are disabled during
    # the test time.
    model.eval()

    # Tracking variables
    val_accuracy = []
    val_loss = []

    # For each batch in our validation set...
    for batch in val_dataloader:
        # Load batch to GPU
        b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)

        # Computr lo
        with torch.no_grad():
            logits = model(b_input_ids, b_attn_mask)

        # Compute loss
        loss = loss_fn(logits, b_labels)
        val_loss.append(loss.item())

        # Get the predictions
        preds = torch.argmax(logits, dim=1).flatten()

        # Calculate the accuracy rate
        accuracy = (preds == b_labels).cpu().numpy().mean() * 100
        val_accuracy.append(accuracy)

    # Compute the average accuracy and loss over the validation set.
    val_loss = np.mean(val_loss)
    val_accuracy = np.mean(val_accuracy)
    return val_loss, val_accuracy

m = BertClassifier()
m

"""# Evaluate"""

def evaluate(model, val_dataloader):

    model.eval()
    val_accuracy = []
    val_loss = []

    # For each batch in our validation set...
    for batch in val_dataloader:
        # Load batch to GPU
        b_input_ids, b_attn_mask, b_labels = tuple(t.to(device) for t in batch)

        # Computr lo
        with torch.no_grad():
            logits = model(b_input_ids, b_attn_mask)

        # Compute loss
        loss = loss_fn(logits, b_labels)
        val_loss.append(loss.item())

        # Get the predictions
        preds = torch.argmax(logits, dim=1).flatten()

        # Calculate the accuracy rate
        accuracy = (preds == b_labels).cpu().numpy().mean() * 100
        val_accuracy.append(accuracy)

    # Compute the average accuracy and loss over the validation set.
    val_loss = np.mean(val_loss)
    val_accuracy = np.mean(val_accuracy)
    return val_loss, val_accuracy

set_seed(42)
bert_classifier, optimizer, scheduler = initialize_model(epochs=2)
train(bert_classifier, train_dataloader, val_dataloader, epochs=2, evaluation=True)

PATH = 'model_AraBERT.pt'
torch.save(bert_classifier.state_dict(), PATH)

def bert_predict(model, test_dataloader):
    """Perform a forward pass on the trained BERT model to predict probabilities
    on the test set.
    """
    # Put the model into the evaluation mode. The dropout layers are disabled during
    # the test time.
    model.eval()

    all_logits = []

    # For each batch in our test set...
    for batch in test_dataloader:
        # Load batch to GPU
        b_input_ids, b_attn_mask = tuple(t.to(device) for t in batch)[:2]

        # Compute logits
        with torch.no_grad():
          logits = model(b_input_ids, b_attn_mask)
        all_logits.append(logits)

    # Concatenate logits from each batch
    all_logits = torch.cat(all_logits, dim=0)

    # Apply softmax to calculate probabilities
    probs = F.softmax(all_logits, dim=1).cpu().numpy()

    return probs

from sklearn.metrics import classification_report
from sklearn.metrics import roc_curve, auc, accuracy_score, precision_score, recall_score, f1_score, classification_report, confusion_matrix
import matplotlib.pyplot as plt

import matplotlib.pyplot as plt
def evaluate_roc(probs, y_true, model_name, dataset_name, test_dataset_name, threshold=0.5):
    """
    - Print AUC, accuracy, precision, recall, F1 score, classification report, and confusion matrix on the test set
    - Plot ROC
    @params    probs (np.array): an array of predicted probabilities with shape (len(y_true),)
    @params    y_true (np.array): an array of the true values with shape (len(y_true),)
    """
    preds = probs[:, 1]
    fpr, tpr, thresholds = roc_curve(y_true, preds)
    roc_auc = auc(fpr, tpr)
    print(f'AUC: {roc_auc:.4f}')

    # Get binary predictions based on the threshold
    y_pred = (preds >= threshold).astype(int)

    # Calculate and print accuracy
    accuracy = accuracy_score(y_true, y_pred)
    print(f'Accuracy: {accuracy*100:.2f}%')

    # Calculate and print precision
    precision = precision_score(y_true, y_pred)
    print(f'Precision: {precision:.4f}')

    # Calculate and print recall
    recall = recall_score(y_true, y_pred)
    print(f'Recall: {recall:.4f}')

    # Calculate and print F1 score
    f1 = f1_score(y_true, y_pred)
    print(f'F1 Score: {f1:.4f}')

    # Print classification report
    print("Classification Report:")
    print(classification_report(y_true, y_pred))

    # Print confusion matrix
    print("Confusion Matrix:")
    print(confusion_matrix(y_true, y_pred))

    # Plot ROC AUC
    plt.title(f" ROC of {model_name} trained on {dataset_name} dataset & evaluated on the {test_dataset_name} dataset ")
    plt.plot(fpr, tpr, 'b', label = 'AUC = %0.2f' % roc_auc)
    plt.legend(loc = 'lower right')
    plt.plot([0, 1], [0, 1],'r--')
    plt.xlim([0, 1])
    plt.ylim([0, 1])
    plt.ylabel('True Positive Rate')
    plt.xlabel('False Positive Rate')
    plt.show()

probs = bert_predict(bert_classifier, val_dataloader)

evaluate_roc(probs, y_val, "Model", "Training", "Testing")

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer

data = pd.read_csv('/content/drive/My Drive/Master_Finally/Fake_vaccination/Data/data_after_cleaning.csv')
df = data
X = df.root_extracting.values
y = df.stance.values

VecModel = TfidfVectorizer()
X_Vec = VecModel.fit_transform(X)
X_Vec = pd.DataFrame.sparse.from_spmatrix(X_Vec)

print(f'The new shape for X is {X_Vec.shape}')

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

from sklearn.pipeline import Pipeline
from sklearn.linear_model import LogisticRegression

model = Pipeline([('tfidf', TfidfVectorizer()),
                     ('lr', LogisticRegression(solver='lbfgs')),])


model.fit(X_train, y_train)

#################################################################
test_data = pd.read_csv("/content/drive/My Drive/Master_Finally/Fake_vaccination/Final_proposed_model/BLSTM/predictions.csv")
X_test = test_data['Text']
y_test = test_data['Actual_Label']
pred = model.predict(X_test)

from sklearn.metrics import accuracy_score
# Evaluate accuracy
accuracy = accuracy_score(y_test, pred)
print(f'Accuracy on the test set: {accuracy * 100:.2f}%')

# Save predictions to CSV file
results_df = pd.DataFrame({'Text': X_test, 'Actual_Label': y_test, 'Predicted_Label': pred})
results_df.to_csv('predictions_scv_lstm.csv', index=False)

print('Predictions saved to predictions.csv')

